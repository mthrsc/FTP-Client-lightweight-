/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UIPack;

import App.FTPConnect;
import App.LocalExplorer;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import ListPackage.List;
import java.util.Arrays;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author mth
 */
public class FTPUI extends javax.swing.JFrame {

    FTPConnect f = new FTPConnect();
    private DefaultListModel localTreeModel = new DefaultListModel();  //Creating model for JList element
    private DefaultListModel remoteTreeModel = new DefaultListModel();  //Creating model for JList element
    List temp = new List();
    LocalExplorer le = new LocalExplorer();
    DefaultComboBoxModel<String> localComboBoxModel = new DefaultComboBoxModel<>();

    /**
     * Creates new form FTPUI
     *
     * @param f
     */
    public FTPUI(FTPConnect f) {
        initComponents();
        this.f = f;
        updateComboBox();
        updateLocalTree();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        ServerIP_Label = new javax.swing.JLabel();
        ServerPort_Label = new javax.swing.JLabel();
        ExitButton = new javax.swing.JButton();
        ipAddressText = new javax.swing.JTextField();
        portText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        usernameText = new javax.swing.JTextField();
        passwordText = new javax.swing.JPasswordField();
        connectButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        transferLocalToRemoteButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        localTreeList = new javax.swing.JList<>();
        localPathText = new javax.swing.JTextField();
        listLocalDirButton = new javax.swing.JButton();
        localComboBox = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        remoteTreeList = new javax.swing.JList<>();
        remotePathText = new javax.swing.JTextField();
        refreshRemoteButton = new javax.swing.JButton();
        removeRemoteFileButton = new javax.swing.JButton();
        transferLocalToRemoteRemoveButton = new javax.swing.JButton();
        transferRemoteToLocalButton = new javax.swing.JButton();
        transferRemoteToLocalRemoveButton = new javax.swing.JButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FTP_Java");

        ServerIP_Label.setText("Server IP:");

        ServerPort_Label.setText("Server port:");

        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        ipAddressText.setText("192.168.1.14");

        portText.setText("2221");

        jLabel1.setText("Username:");

        jLabel2.setText("Password:");

        usernameText.setText("anonymous");

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        transferLocalToRemoteButton.setText("Transfer >>>");
        transferLocalToRemoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferLocalToRemoteButtonActionPerformed(evt);
            }
        });

        localTreeList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                localTreeListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(localTreeList);

        localPathText.setText("c:");
        localPathText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                localPathTextKeyPressed(evt);
            }
        });

        listLocalDirButton.setText("Refresh Local Tree");
        listLocalDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listLocalDirButtonActionPerformed(evt);
            }
        });

        localComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                localComboBoxPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        remoteTreeList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                remoteTreeListMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(remoteTreeList);

        refreshRemoteButton.setText("Refresh Remote Tree");
        refreshRemoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshRemoteButtonActionPerformed(evt);
            }
        });

        removeRemoteFileButton.setText("Remove file(s)");
        removeRemoteFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRemoteFileButtonActionPerformed(evt);
            }
        });

        transferLocalToRemoteRemoveButton.setText("Transfer and Remove >>>");
        transferLocalToRemoteRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferLocalToRemoteRemoveButtonActionPerformed(evt);
            }
        });

        transferRemoteToLocalButton.setText("<<< Transfer");
        transferRemoteToLocalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferRemoteToLocalButtonActionPerformed(evt);
            }
        });

        transferRemoteToLocalRemoveButton.setText("<<< Transfer and Remove");
        transferRemoteToLocalRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferRemoteToLocalRemoveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listLocalDirButton)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(localPathText, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(112, 112, 112)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(transferLocalToRemoteRemoveButton)
                                    .addComponent(transferLocalToRemoteButton)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(transferRemoteToLocalRemoveButton)
                                    .addComponent(transferRemoteToLocalButton)))))
                    .addComponent(localComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(removeRemoteFileButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(refreshRemoteButton))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(remotePathText)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(localComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(localPathText)
                    .addComponent(remotePathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(transferLocalToRemoteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(transferLocalToRemoteRemoveButton)
                        .addGap(18, 18, 18)
                        .addComponent(transferRemoteToLocalButton)
                        .addGap(18, 18, 18)
                        .addComponent(transferRemoteToLocalRemoveButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(refreshRemoteButton)
                            .addComponent(removeRemoteFileButton)
                            .addComponent(listLocalDirButton))))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ServerIP_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ipAddressText, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(ServerPort_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(portText, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usernameText, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(connectButton)
                        .addGap(36, 36, 36)
                        .addComponent(ExitButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ServerIP_Label)
                    .addComponent(ipAddressText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ServerPort_Label)
                    .addComponent(portText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(usernameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(passwordText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton)
                    .addComponent(ExitButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(42, 42, 42))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        // TODO add your handling code here:
        f.closeConnection();
        System.exit(0);     //Terminate software
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
        f.connect(ipAddressText.getText(), Integer.parseInt(portText.getText()), usernameText.getText(), passwordText.getText());
        updateRemoteTree();
    }//GEN-LAST:event_connectButtonActionPerformed

    private void localPathTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_localPathTextKeyPressed
        // TODO add your handling code here:
        char ch = evt.getKeyChar();

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            updateLocalTree();
        }
    }//GEN-LAST:event_localPathTextKeyPressed

    private void localTreeListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_localTreeListMouseClicked
        // TODO add your handling code here:
        String s = new String();
        if (evt.getClickCount() == 2) {
            s = localTreeList.getSelectedValue();
            if (s.equals("..")) {
                System.out.println("Parent folder: " + le.getParentFolder(localPathText.getText()));
                localPathText.setText(le.getParentFolder(localPathText.getText()));
                updateLocalTree();
            } else if (s.charAt(0) == '.' && s.charAt(1) != '.') {
                localPathText.setText(localPathText.getText() + "\\" + s);
                updateLocalTree();
            } else if (!s.contains(".")) {
                localPathText.setText(localPathText.getText() + "\\" + s);
                updateLocalTree();
            }
        }
    }//GEN-LAST:event_localTreeListMouseClicked

    private void listLocalDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listLocalDirButtonActionPerformed
        // TODO add your handling code here:
        updateLocalTree();
    }//GEN-LAST:event_listLocalDirButtonActionPerformed

    private void localComboBoxPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_localComboBoxPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        String s;
        s = localComboBox.getSelectedItem().toString();
        localPathText.setText(s);
        updateLocalTree();
    }//GEN-LAST:event_localComboBoxPopupMenuWillBecomeInvisible

    private void remoteTreeListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remoteTreeListMousePressed
        // TODO add your handling code here:
        String s = new String();
        if (evt.getClickCount() == 2) {
            s = remoteTreeList.getSelectedValue();
            if (s.equals("..")) {
                System.out.println("Parent folder Remote: " + f.getParentFolder(remotePathText.getText()));
                remotePathText.setText(f.getParentFolder(remotePathText.getText()));
                updateRemoteTree();
            } else if (s.charAt(0) == '.' && s.charAt(1) != '.') {
                remotePathText.setText(remotePathText.getText() + "\\" + s);
                updateRemoteTree();
            } else if (!s.contains(".")) {
                remotePathText.setText(remotePathText.getText() + "\\" + s);
                updateRemoteTree();
            }
        }
        if (remotePathText.getText().equals("\\\\")) {
            remotePathText.setText("\\");
        }
    }//GEN-LAST:event_remoteTreeListMousePressed

    private void transferLocalToRemoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferLocalToRemoteButtonActionPerformed
        // TODO add your handling code here:
        transferLocalToRemote(false);
        updateRemoteTree();
        System.out.println("Transfer finished");
    }//GEN-LAST:event_transferLocalToRemoteButtonActionPerformed

    private void refreshRemoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshRemoteButtonActionPerformed
        // TODO add your handling code here:
        updateRemoteTree();
    }//GEN-LAST:event_refreshRemoteButtonActionPerformed

    private void removeRemoteFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRemoteFileButtonActionPerformed
        // TODO add your handling code here:
        List l = new List();
        String remoteFolder = remotePathText.getText();
        for (Object v : remoteTreeList.getSelectedValues()) {
            l.add(v);
        }
        l.printList();
        f.removeRemoteFile(l, remoteFolder);
        updateRemoteTree();
    }//GEN-LAST:event_removeRemoteFileButtonActionPerformed

    private void transferLocalToRemoteRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferLocalToRemoteRemoveButtonActionPerformed
        // TODO add your handling code here:
        transferLocalToRemote(true);
        updateRemoteTree();
        updateLocalTree();
        System.out.println("Transfer finished");
    }//GEN-LAST:event_transferLocalToRemoteRemoveButtonActionPerformed

    private void transferRemoteToLocalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferRemoteToLocalButtonActionPerformed
        // TODO add your handling code here:
        transferRemoteToLocal(false);
    }//GEN-LAST:event_transferRemoteToLocalButtonActionPerformed

    private void transferRemoteToLocalRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferRemoteToLocalRemoveButtonActionPerformed
        // TODO add your handling code here:
        transferRemoteToLocal(true);
    }//GEN-LAST:event_transferRemoteToLocalRemoveButtonActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FTPUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FTPUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FTPUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FTPUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }

    private void updateLocalTree() {
        localTreeModel.clear();
        localTreeModel.addElement("..");

        for (String s : le.localFileList(localPathText.getText())) {
            localTreeModel.addElement(s);
        }
        localTreeList.setModel(localTreeModel);
        localPathText.setText(le.getCurrentPath());
    }

    private void updateRemoteTree() {
        String pathText = remotePathText.getText();
        List l = new List();
        l = f.listRemoteDir(pathText);
        remoteTreeModel.clear();
        remoteTreeModel.addElement("..");

        for (int i = 0; i <= l.size(); i++) {
//            System.out.println("Adding GUI: " + l.getName(i));
            remoteTreeModel.addElement(l.get(i));
        }
        remoteTreeList.setModel(remoteTreeModel);
    }

    private void updateComboBox() {
        localComboBoxModel.removeAllElements();
        for (int i = 0; i < le.listLocalDrives().size(); i++) {
            localComboBoxModel.addElement(le.listLocalDrives().get(i));
        }
        localComboBoxModel.removeElementAt(0);
        localComboBox.setModel(localComboBoxModel);
    }

    private void transferLocalToRemote(boolean eraseSource) {

        List l = new List();
        String localFolder = localPathText.getText();
        String remoteFolder = remotePathText.getText();
        for (Object v : localTreeList.getSelectedValues()) {
            l.add(v);
        }
        l.printList();
        f.transferLocalToRemote(l, localFolder, remoteFolder, eraseSource);
        updateRemoteTree();
        updateLocalTree();
    }

    private void transferRemoteToLocal(boolean eraseSource)  {
        List l = new List();
        String localFolder = localPathText.getText();
        String remoteFolder = remotePathText.getText();
        for (Object o : remoteTreeList.getSelectedValues()) {
            l.add(o);
        }
        try {
            f.transferRemoteToLocal(l, localFolder, remoteFolder, eraseSource);
        } catch (IOException ex) {
            Logger.getLogger(FTPUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        updateRemoteTree();
        updateLocalTree();

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExitButton;
    private javax.swing.JLabel ServerIP_Label;
    private javax.swing.JLabel ServerPort_Label;
    private javax.swing.JButton connectButton;
    private javax.swing.JTextField ipAddressText;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton listLocalDirButton;
    private javax.swing.JComboBox<String> localComboBox;
    private javax.swing.JTextField localPathText;
    private javax.swing.JList<String> localTreeList;
    private javax.swing.JPasswordField passwordText;
    private javax.swing.JTextField portText;
    private javax.swing.JButton refreshRemoteButton;
    private javax.swing.JTextField remotePathText;
    private javax.swing.JList<String> remoteTreeList;
    private javax.swing.JButton removeRemoteFileButton;
    private javax.swing.JButton transferLocalToRemoteButton;
    private javax.swing.JButton transferLocalToRemoteRemoveButton;
    private javax.swing.JButton transferRemoteToLocalButton;
    private javax.swing.JButton transferRemoteToLocalRemoveButton;
    private javax.swing.JTextField usernameText;
    // End of variables declaration//GEN-END:variables
}
